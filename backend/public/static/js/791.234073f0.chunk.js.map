{"version":3,"file":"static/js/791.234073f0.chunk.js","mappings":"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","sources":["shared/components/UIElements/Card.js","user/pages/Auth.js"],"sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\"; \nimport {useState, useContext} from \"react\";\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom.min';\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport { \n    VALIDATOR_EMAIL,\n    VALIDATOR_MINLENGTH,\n    VALIDATOR_REQUIRE\n } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport './Auth.css'\n\nconst Auth = () => {\n    const auth = useContext(AuthContext);\n    const [isLoginMode, setIsLoginMode] = useState(true);\n    const { isLoading, error, sendRequest, clearError} = useHttpClient();\n\n    const [formState, inputHandler, setFormData] = useForm({\n        email: {\n            value: '',\n            isValid: false\n        },\n        password: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    const history = useHistory(); \n\n    const switchModeHandler = () => {\n        if (!isLoginMode){\n            setFormData(\n                {\n                    ...formState.inputs,\n                    name: undefined,\n                    image: undefined,\n                },\n                formState.inputs.email.isValid && formState.inputs.password.isValid\n            );\n        } else {\n            setFormData(\n                    {\n                    ...formState.inputs,\n                    name: {\n                        value: '',\n                        isValid: false\n                    },\n                    image: {\n                        value: null,\n                        isValid: false\n                    }\n                },\n                false\n            );\n        }\n        setIsLoginMode(prevMode => !prevMode);\n        \n    };\n\n    const authSubmitHandler = async event => {\n        event.preventDefault();\n\n        console.log(formState.inputs);\n\n        if (isLoginMode) {\n            try {\n                const responseData = await sendRequest(process.env.REACT_APP_BACKEND_URL + '/users/login', \n                    'POST',\n                    JSON.stringify({\n                        email: formState.inputs.email.value,\n                        password: formState.inputs.password.value\n                    }),\n                    {\n                        'Content-Type': 'application/json'\n                    }\n                    \n                );\n                auth.login(responseData.userId, responseData.token);\n                history.push('/')\n            } catch (err) {}\n        } else {\n            try {\n                const formData = new FormData();\n                formData.append('email', formState.inputs.email.value);\n                formData.append('name', formState.inputs.name.value);\n                formData.append('password', formState.inputs.password.value);\n                formData.append('image', formState.inputs.image.value);\n                const responseData = await sendRequest(\n                    process.env.REACT_APP_BACKEND_URL +'/users/signup',\n                    'POST',\n                    formData   \n                );\n                auth.login(responseData.userId, responseData.token);\n                history.push('/')\n            } catch (err) {\n            }   \n        }\n    };\n\n\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError}/>\n            <Card className=\"authentication\">\n                {isLoading && <LoadingSpinner asOverlay/>}\n                <h2>Login Required</h2>\n                <hr />\n                <form onSubmit={authSubmitHandler}>\n                    {!isLoginMode && (\n                        <Input \n                            element=\"input\" \n                            id=\"name\" \n                            type=\"text\" \n                            label=\"Your Name\" \n                            validators={[VALIDATOR_REQUIRE()]} \n                            errorText=\"Please eneter a Name.\"\n                            onInput={inputHandler}\n                        />\n                    )}\n                    {!isLoginMode && <ImageUpload center id=\"image\" onInput={inputHandler} errorText=\"Please provide an image!\"/>}\n                    <Input \n                        element=\"input\" \n                        id=\"email\" \n                        type=\"email\" \n                        label=\"E-mail\" \n                        validators={[VALIDATOR_EMAIL()]} \n                        errorText=\"Please eneter a valid email address.\"\n                        onInput={inputHandler}\n                    />\n                    <Input \n                        element=\"input\" \n                        id=\"password\" \n                        type=\"password\" \n                        label=\"password\" \n                        validators={[VALIDATOR_MINLENGTH(6)]} \n                        errorText=\"Please eneter a valid password atleast 6 characters.\"\n                        onInput={inputHandler}\n                    />\n                    <Button type=\"submit\" disabled={!formState.isValid}>\n                        {isLoginMode ? 'LOGIN': 'SIGNUP'}\n                    </Button>\n                </form>\n                <Button inverse onClick={switchModeHandler} >\n                    Switch to {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n                </Button>\n            </Card>\n        </React.Fragment>\n    )\n};\n \nexport default Auth;"],"names":["props","_jsx","className","concat","style","children","Auth","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","useState","isLoading","error","sendRequest","clearError","useHttpClient","formState","inputHandler","setFormData","useForm","email","value","isValid","password","history","useHistory","_jsxs","React","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","async","event","preventDefault","console","log","inputs","responseData","process","JSON","stringify","login","userId","token","push","err","formData","FormData","append","name","image","Input","element","id","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","ImageUpload","center","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","Button","disabled","inverse","onClick","switchModeHandler","undefined","prevMode"],"sourceRoot":""}